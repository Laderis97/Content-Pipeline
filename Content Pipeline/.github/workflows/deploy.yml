name: Deploy Content Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'supabase/**'
      - 'scripts/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'supabase/**'
      - 'scripts/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: false
        type: boolean
      skip_functions:
        description: 'Skip Edge Functions deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DENO_VERSION: '1.40.0'

jobs:
  # Job 1: Validate and Test
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate TypeScript
        run: |
          npx tsc --noEmit
          
      - name: Validate Edge Functions
        run: |
          for func in supabase/functions/*/; do
            if [ -f "$func/index.ts" ]; then
              echo "Validating $(basename "$func")..."
              deno check "$func/index.ts"
            fi
          done
          
      - name: Validate database migrations
        run: |
          # Check if supabase CLI is available
          if command -v supabase &> /dev/null; then
            supabase db diff --schema public || echo "Migration validation failed, but continuing..."
          else
            echo "Supabase CLI not available, skipping migration validation"
          fi
          
      - name: Run linting
        run: |
          # Check for common issues
          echo "Checking for common issues..."
          
          # Check for hardcoded secrets
          if grep -r "sk-" supabase/functions/; then
            echo "ERROR: Hardcoded OpenAI API key found"
            exit 1
          fi
          
          if grep -r "password.*=" supabase/functions/; then
            echo "ERROR: Hardcoded password found"
            exit 1
          fi
          
          # Check for proper error handling
          if grep -r "console.log" supabase/functions/; then
            echo "WARNING: console.log found, consider using logger"
          fi
          
          echo "Linting completed"

  # Job 2: Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
          
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Supabase
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_DEV }}
          
      - name: Deploy to Development
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh \
            --environment development \
            --project-id ${{ secrets.SUPABASE_PROJECT_ID_DEV }} \
            --skip-tests ${{ github.event.inputs.skip_tests || 'false' }} \
            --skip-migrations ${{ github.event.inputs.skip_migrations || 'false' }} \
            --skip-functions ${{ github.event.inputs.skip_functions || 'false' }}
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          WORDPRESS_URL: ${{ secrets.WORDPRESS_URL_DEV }}
          WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
          WORDPRESS_PASSWORD: ${{ secrets.WORDPRESS_PASSWORD_DEV }}
          
      - name: Verify Deployment
        run: |
          # Test key endpoints
          echo "Testing deployment..."
          
          # Test scheduler status
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_DEV }}.supabase.co/functions/v1/scheduler?action=status" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}" \
            -H "Content-Type: application/json" || echo "Scheduler test failed"
            
          # Test content automation
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_DEV }}.supabase.co/functions/v1/content-automation" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}" \
            -H "Content-Type: application/json" || echo "Content automation test failed"
            
          echo "Deployment verification completed"
          
      - name: Notify Deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Development deployment successful"
          else
            echo "❌ Development deployment failed"
          fi

  # Job 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, deploy-development]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
          
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Supabase
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_STAGING }}
          
      - name: Deploy to Staging
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh \
            --environment staging \
            --project-id ${{ secrets.SUPABASE_PROJECT_ID_STAGING }} \
            --skip-tests ${{ github.event.inputs.skip_tests || 'false' }} \
            --skip-migrations ${{ github.event.inputs.skip_migrations || 'false' }} \
            --skip-functions ${{ github.event.inputs.skip_functions || 'false' }}
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          WORDPRESS_URL: ${{ secrets.WORDPRESS_URL_STAGING }}
          WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
          WORDPRESS_PASSWORD: ${{ secrets.WORDPRESS_PASSWORD_STAGING }}
          
      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          
          # Test scheduler
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_STAGING }}.supabase.co/functions/v1/scheduler?action=test" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}" \
            -H "Content-Type: application/json" || echo "Scheduler test failed"
            
          # Test secrets management
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_STAGING }}.supabase.co/functions/v1/secrets?action=status" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}" \
            -H "Content-Type: application/json" || echo "Secrets test failed"
            
          echo "Integration tests completed"
          
      - name: Verify Deployment
        run: |
          # Test key endpoints
          echo "Testing deployment..."
          
          # Test scheduler status
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_STAGING }}.supabase.co/functions/v1/scheduler?action=status" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}" \
            -H "Content-Type: application/json" || echo "Scheduler test failed"
            
          # Test content automation
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_STAGING }}.supabase.co/functions/v1/content-automation" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}" \
            -H "Content-Type: application/json" || echo "Content automation test failed"
            
          echo "Deployment verification completed"
          
      - name: Notify Deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  # Job 4: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
          
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Supabase
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_PROD }}
          
      - name: Deploy to Production
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh \
            --environment production \
            --project-id ${{ secrets.SUPABASE_PROJECT_ID_PROD }} \
            --skip-tests ${{ github.event.inputs.skip_tests || 'false' }} \
            --skip-migrations ${{ github.event.inputs.skip_migrations || 'false' }} \
            --skip-functions ${{ github.event.inputs.skip_functions || 'false' }}
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          WORDPRESS_URL: ${{ secrets.WORDPRESS_URL_PROD }}
          WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
          WORDPRESS_PASSWORD: ${{ secrets.WORDPRESS_PASSWORD_PROD }}
          
      - name: Run Production Tests
        run: |
          echo "Running production tests..."
          
          # Test scheduler
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_PROD }}.supabase.co/functions/v1/scheduler?action=test" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}" \
            -H "Content-Type: application/json" || echo "Scheduler test failed"
            
          # Test secrets management
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_PROD }}.supabase.co/functions/v1/secrets?action=status" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}" \
            -H "Content-Type: application/json" || echo "Secrets test failed"
            
          # Test content automation
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_PROD }}.supabase.co/functions/v1/content-automation" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}" \
            -H "Content-Type: application/json" || echo "Content automation test failed"
            
          echo "Production tests completed"
          
      - name: Verify Deployment
        run: |
          # Test key endpoints
          echo "Testing deployment..."
          
          # Test scheduler status
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_PROD }}.supabase.co/functions/v1/scheduler?action=status" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}" \
            -H "Content-Type: application/json" || echo "Scheduler test failed"
            
          # Test content automation
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_PROD }}.supabase.co/functions/v1/content-automation" \
            -H "Authorization: Bearer ${{ secrets.SERVICE_ROLE_KEY_PROD }}" \
            -H "Content-Type: application/json" || echo "Content automation test failed"
            
          echo "Deployment verification completed"
          
      - name: Notify Deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  # Job 5: Rollback (Manual Trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
          
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Supabase
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_PROD }}
          
      - name: Rollback Deployment
        run: |
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh \
            --environment production \
            --project-id ${{ secrets.SUPABASE_PROJECT_ID_PROD }} \
            --force
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}
          
      - name: Verify Rollback
        run: |
          # Test key endpoints after rollback
          echo "Testing rollback..."
          
          # Test scheduler status
          curl -s -X GET "https://${{ secrets.SUPABASE_PROJECT_ID_PROD }}.supabase.co/functions/v1/scheduler?action=status" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PROD }}" \
            -H "Content-Type: application/json" || echo "Scheduler test failed"
            
          echo "Rollback verification completed"
          
      - name: Notify Rollback
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Rollback successful"
          else
            echo "❌ Rollback failed"
          fi
